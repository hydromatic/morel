#!/bin/bash
# Script to launch morel
#
# Licensed to Julian Hyde under one or more contributor license
# agreements.  See the NOTICE file distributed with this work
# for additional information regarding copyright ownership.
# Julian Hyde licenses this file to you under the Apache
# License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License.  You may obtain a
# copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied.  See the License for the specific
# language governing permissions and limitations under the
# License.
#
# Example:
# $ ./morel
# morel> 3 + 5;
# morel> it = 8;

# Print usage
usage() {
  cd $(dirname $0)
  head -1 ./README
  echo "Usage: morel [option...] [file...]"
  echo
  echo Options:
  echo "  --build             Compile the source code first."
  echo "  -h, --help          Print this help, then exit."
  echo "  --idempotent        Treat all files (and stdin) as SMLI format."
  echo "                      Set implicitly if the first file has suffix '.smli'."
  echo "  --no-build          Don't compile the source code first. (This is the"
  echo "                      default, but a limited build will always occur if"
  echo "                      'target/classpath.txt' is not present.)"
}

# Process options.
BUILD=
HELP=
FORMAT=
while [ $# -gt 0 ]; do
  case "$1" in
    (--help|-h)
      HELP=true
      shift
      ;;
    (--no-build)
      BUILD=
      shift
      ;;
    (--build)
      BUILD=true
      shift
      ;;
    (--idempotent)
      FORMAT=smli
      shift
      ;;
    (*.smli)
      if [ "$FILES" = "" ]; then
        FORMAT=smli
        FILES="$1"
      else
        FILES="$FILES $1"
      fi
      shift
      ;;
    (*)
      if [ "$FILES" = "" ]; then
        FILES="$1"
      else
        FILES="$FILES $1"
      fi
      shift
      ;;
  esac
done

if [ "$HELP" ]; then
  usage
  exit 1
fi

# Deduce whether we are running cygwin
case $(uname -s) in
(CYGWIN*) cygwin=true;;
(*) cygwin=;;
esac

# Build classpath on first call.
# (To force rebuild, remove target/classpath.txt, or just "./mvnw clean".)
cd "$(dirname "$0")" || exit
if [ "$BUILD" ]; then
    ./mvnw -DskipTests \
        dependency:build-classpath -Dmdep.outputFile=target/classpath.txt \
        compile test
elif [ ! -f target/classpath.txt ]; then
    ./mvnw -DskipTests \
        dependency:build-classpath -Dmdep.outputFile=target/classpath.txt
fi

CP="target/classes:\
target/test-classes:\
$(cat target/classpath.txt)"

VM_OPTS=
if [ "$cygwin" ]; then
  CP=$(cygpath -wp "$CP")

  # Work around https://github.com/jline/jline2/issues/62
  VM_OPTS=-Djline.terminal=jline.UnixTerminal
fi

export JAVA_OPTS=-Djavax.xml.parsers.DocumentBuilderFactory=com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl

case "$FORMAT" in
  (smli)
    if [ "$FILES" = "" ]; then
      FILES=-
    fi
    exec java $VM_OPTS -cp "${CP}" $JAVA_OPTS net.hydromatic.morel.ScriptTest \
        --directory="$(pwd)" \
        "$FILES"
    ;;
  (*)
    exec java $VM_OPTS -cp "${CP}" $JAVA_OPTS net.hydromatic.morel.Shell \
         --foreign='net.hydromatic.morel.BuiltInDataSet$Dictionary' \
         --directory="$(pwd)" \
         "$FILES"
    ;;
esac

# End morel
