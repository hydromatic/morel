(*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 *
 * Tests type aliases, i.e. types declared using the 'type' keyword.
 *)

(*) Type alias
type myInt = int;
> type myInt = int
val x: myInt = 5;
> val x = 5 : myInt
val x = 6 : myInt;
> val x = 6 : myInt
val x = (6 : myInt) + 1;
> val x = 7 : int

(*) Deduce list type based on first element
val list = [1: myInt];
> val list = [1] : myInt list
val list = [2: myInt, 3: myInt, 4];
> val list = [2,3,4] : myInt list
val list = [5, 6: myInt];
> val list = [5,6] : int list
val list = []: myInt list;
> val list = [] : myInt list
val list = []: int list;
> val list = [] : int list

type intPair = int * int;
> type intPair = int * int
val x: intPair = (4, 5);
> val x = (4,5) : intPair
val x2 = (4, 5): intPair;
> val x2 = (4,5) : intPair
val x3 = (4, 5);
> val x3 = (4,5) : int * int
val y: int * int = x;
> val y = (4,5) : int * int
val z: intPair = y;
> val z = (4,5) : intPair

(*) Define two aliases at once
type myInt = int and myRealList = real list;
> type myInt = int
> type myRealList = real list
val reals = [1.0, 2.0, 3.0]: myRealList;
> val reals = [1.0,2.0,3.0] : myRealList

(*) End type-alias.smli
