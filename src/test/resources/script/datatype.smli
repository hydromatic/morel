(*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 *
 * Algebraic types ("datatype").
 *)
Sys.set ("printDepth", ~1);
> val it = () : unit

(*) Basic operations on 'int'
2 + 3;
> val it = 5 : int
2 - 3;
> val it = ~1 : int
2 * 3;
> val it = 6 : int
2 / 3;
> val it = 0 : int
3 / 2;
> val it = 1 : int
3 mod 2;
> val it = 1 : int
~2 * 3;
> val it = ~6 : int
~(2 + 3);
> val it = ~5 : int
2 < 3;
> val it = true : bool
2 <= 3;
> val it = true : bool
2 > 3;
> val it = false : bool
2 >= 3;
> val it = false : bool
2 = 3;
> val it = false : bool
2 <> 3;
> val it = true : bool

(*) Basic operations on 'real'
2.0 + 3.0;
> val it = 5.0 : real
2.0 - 3.0;
> val it = ~1.0 : real
2.0 * 3.0;
> val it = 6.0 : real
2.0 / 3.0;
> val it = 0.6666667 : real
3.0 / 2.0;
> val it = 1.5 : real
~2.0 * 3.0;
> val it = ~6.0 : real
~(2.0 + 3.0);
> val it = ~5.0 : real
2.0 < 3.0;
> val it = true : bool
2.0 <= 3.0;
> val it = true : bool
2.0 > 3.0;
> val it = false : bool
2.0 >= 3.0;
> val it = false : bool
2.0 = 3.0;
> val it = false : bool
2.0 <> 3.0;
> val it = true : bool

(*) Three different kinds of 'greater'
fun greater_alpha (x, y) = if x < y then y else x;
> val greater_alpha = fn : 'a * 'a -> 'a
greater_alpha (2, 3);
> val it = 3 : int
greater_alpha (2.0, 3.0);
> val it = 3.0 : real
fun greater_int (x, y) = if x < y then y + 0 else x;
> val greater_int = fn : int * int -> int
greater_int (2, 3);
> val it = 3 : int
fun greater_real (x, y) = if x < y then y + 0.0 else x;
> val greater_real = fn : real * real -> real
greater_real (2.0, 3.0);
> val it = 3.0 : real

(*) Tuple type with a polymorphic member
let
  val r = (fn x => x, 2)
in
  (#1 r) 1
end;
> val it = 1 : int

(*) Record type with a polymorphic member
let
  val r = {a = fn x => x, b = 2}
in
  r.a 1
end;
> val it = 1 : int

let
  val r = {a = fn x => x, b = 2}
in
  (r.a "x", r.b)
end;
> val it = ("x",2) : string * int

(*) A datatype whose constructor overwrites another datatype's constructor
datatype foo = W | X | Y of int;
> datatype foo = W | X | Y of int
X;
> val it = X : foo
Y;
> val it = fn : int -> foo
Y 0;
> val it = Y 0 : foo
datatype bar = X of int | Y of int * bool | Z;
> datatype bar = X of int | Y of int * bool | Z
X;
> val it = fn : int -> bar
Y;
> val it = fn : int * bool -> bar
Y (1, true);
> val it = Y (1,true) : bar
Z;
> val it = Z : bar

(*) The following is syntax error:
(*
datatype bar = X of int | Y of (int, bool) | Z;
*)

(*) A recursive type, without generics
datatype inttree = Empty | Node of inttree * int * inttree;
> datatype inttree = Empty | Node of inttree * int * inttree
fun greater (x, y) = if x < y then y + 0 else x;
> val greater = fn : int * int -> int
fun height Empty = 0
  | height (Node (lft, _, rht)) = 1 + greater (height lft, height rht);
> val height = fn : inttree -> int
Empty;
> val it = Empty : inttree
height it;
> val it = 0 : int
height Empty;
> val it = 0 : int
Node(Empty, 1, Empty);
> val it = Node (Empty,1,Empty) : inttree
height it;
> val it = 1 : int
height (Node(Empty, 1, Empty));
> val it = 1 : int
Node(Empty, 2, Node(Node(Empty, 3, Empty), 4, Empty));
> val it = Node (Empty,2,Node (Node (Empty,3,Empty),4,Empty)) : inttree
height it;
> val it = 3 : int

(*) Recursive
datatype 'x tree = Empty | Node of 'x tree * 'x * 'x tree;
> datatype 'a tree = Empty | Node of 'a tree * 'a * 'a tree
fun greater (x, y) = if x < y then y else x;
> val greater = fn : 'a * 'a -> 'a
fun height Empty = 0
  | height (Node (lft, _, rht)) = 1 + greater (height lft, height rht);
> val height = fn : 'a tree -> int
Empty;
> val it = Empty : 'a tree
height it;
> val it = 0 : int
Node(Empty, 1, Empty);
> val it = Node (Empty,1,Empty) : int tree
height it;
> val it = 1 : int
Node(Empty, 2, Node(Node(Empty, 3, Empty), 4, Empty));
> val it = Node (Empty,2,Node (Node (Empty,3,Empty),4,Empty)) : int tree
height it;
> val it = 3 : int

(*) Two type parameters
datatype ('y, 'x) tree =
   Empty
 | Node of ('y, 'x) tree * 'x * 'y * ('y, 'x) tree;
> datatype ('a,'b) tree = Empty | Node of ('a,'b) tree * 'b * 'a * ('a,'b) tree
Empty;
> val it = Empty : ('a,'b) tree
Node (Empty, true, "yes", Empty);
> val it = Node (Empty,true,"yes",Empty) : (string,bool) tree

datatype ('a, 'b) Union = A of 'a | B of 'b;
> datatype ('a,'b) Union = A of 'a | B of 'b
A 1;
> val it = A 1 : (int,'a) Union
B true;
> val it = B true : ('a,bool) Union

(*) Mutually recursive
datatype 'a tree = Empty | Node of 'a * 'a forest
and      'a forest = Nil | Cons of 'a tree * 'a forest;
> datatype 'a tree = Empty | Node of 'a * 'a forest
> datatype 'a forest = Nil | Cons of 'a tree * 'a forest
Empty;
> val it = Empty : 'a tree
Nil;
> val it = Nil : 'a forest
Node (1, Nil);
> val it = Node (1,Nil) : int tree
Node (1, Cons (Empty, Nil));
> val it = Node (1,Cons (Empty,Nil)) : int tree
Cons (Empty, Nil);
> val it = Cons (Empty,Nil) : 'a forest
Cons (Empty, Cons (Node (true, Nil), Nil));
> val it = Cons (Empty,Cons (Node (true,Nil),Nil)) : bool forest

(*) Parentheses are required for 2 or more type parameters,
(*) optional for 1 type parameter,
(*) not allowed for 0 type parameters.
datatype ('a, 'b) pair = Pair of 'a * 'b;
> datatype ('a,'b) pair = Pair of 'a * 'b
(* disabled; should throw
datatype 'a, 'b pair = Pair of 'a * 'b; (*) not valid
*)
datatype 'a single = Single of 'a;
> datatype 'a single = Single of 'a
datatype ('a) single = Single of 'a;
> datatype 'a single = Single of 'a
(* disabled; should throw
datatype () void = Void of unit; (*) not valid
datatype () void = Void; (*) not valid
*)
datatype void = Void;
> datatype void = Void
datatype unitVoid = Void of unit;
> datatype unitVoid = Void of unit

(*) Recursive datatype with 2 type parameters
datatype ('a, 'b) tree = EMPTY | NODE of 'a * 'b * ('a, 'b) tree;
> datatype ('a,'b) tree = EMPTY | NODE of 'a * 'b * ('a,'b) tree
EMPTY;
> val it = EMPTY : ('a,'b) tree
NODE (1, true, EMPTY);
> val it = NODE (1,true,EMPTY) : (int,bool) tree
NODE (1, true, NODE (2, false, EMPTY));
> val it = NODE (1,true,NODE (2,false,EMPTY)) : (int,bool) tree

(*
- fun f x none = x | x some y = y;
stdIn:2.5-2.32 Error: clauses don't all have same function name
- fun f x none = x | f x some y = y;
stdIn:1.6-2.1 Error: clauses don't all have same number of patterns
stdIn:1.6-2.1 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): 'Z * 'Y -> 'Z
  this rule: 'X * 'W * 'V -> 'V
  in rule:
    (x,some,y) => y
- datatype o = NONE | SOME of int;
datatype o = NONE | SOME of int
- fun f NONE = 0 | f SOME x = x;
stdIn:5.5-5.30 Error: clauses don't all have same number of patterns
stdIn:5.20-5.24 Error: data constructor SOME used without argument in pattern
stdIn:5.5-5.30 Error: parameter or result constraints of clauses don't agree [tycon mismatch]
  this clause:      'Z * 'Y -> 'X
  previous clauses:      o -> 'X
  in declaration:
    f = (fn NONE => 0
          | (_,x) => x)
- fun f NONE = 0 | f (SOME x) = x;
val f = fn : o -> int
- f SOME 5 ;
stdIn:6.1-6.9 Error: operator and operand don't agree [tycon mismatch]
  operator domain: o
  operand:         int -> o
  in expression:
    f SOME
- f (SOME 5);
val it = 5 : int
- fun f x NONE = x | f x SOME y = y;
stdIn:1.6-2.1 Error: clauses don't all have same number of patterns
stdIn:1.25-1.29 Error: data constructor SOME used without argument in pattern
stdIn:1.6-2.1 Error: types of rules don't agree [tycon mismatch]
  earlier rule(s): 'Z * o -> 'Z
  this rule: 'Y * 'X * 'W -> 'W
  in rule:
    (x,_,y) => y
- fun f x NONE = x | f x (SOME y) = y;
val f = fn : int -> o -> int
- f 1 NONE;
val it = 1 : int
- f 2 SOME 3;
stdIn:4.1-4.11 Error: operator and operand don't agree [tycon mismatch]
  operator domain: o
  operand:         int -> o
  in expression:
    (f 2) SOME
- f 2 (SOME 3);
val it = 3 : int
*)

(*) Pattern matching on the same type constructor, nested.
fun f (SOME (SOME i)) = i + 1
  | f (SOME NONE) = 0
  | f NONE = ~1;
> val f = fn : int option option -> int
f (SOME (SOME 3));
> val it = 4 : int
f (SOME (SOME 2));
> val it = 3 : int
f (SOME NONE);
> val it = 0 : int
f NONE;
> val it = ~1 : int

(*) Test cases from [MOREL-126].
fun f ((SOME i) :: nil) = i + 1
  | f nil = 0;
> 0.0-0.0 Warning: match nonexhaustive
>   raised at: 0.0-0.0
> val f = fn : int option list -> int
f [];
> val it = 0 : int
f [SOME 5];
> val it = 6 : int

fun f [(SOME i)] = i
  | f [] = 0;
> 0.0-0.0 Warning: match nonexhaustive
>   raised at: 0.0-0.0
> val f = fn : int option list -> int
f [];
> val it = 0 : int
f [SOME 5];
> val it = 5 : int

(*) Ordering of user-defined datatypes.
datatype 'a tree =
    Empty
  | Leaf of 'a
  | Node of 'a * 'a tree * 'a tree;
> datatype 'a tree = Empty | Leaf of 'a | Node of 'a * 'a tree * 'a tree

(* The comparison order of a datatype is determined by order of
  constructors, not their names. Empty compares less than Leaf,
  which compares less than Node. *)
Relational.compare (Empty, Empty);
> val it = EQUAL : order
Relational.compare (Empty, Leaf 1);
> val it = LESS : order
Relational.compare (Leaf ~100, Empty);
> val it = GREATER : order
Relational.compare (Leaf (Leaf 1), Leaf Empty);
> val it = GREATER : order
Relational.compare (Leaf 1, Node (1, Empty, Empty));
> val it = LESS : order
Relational.compare (Node (2, Leaf 4, Leaf 10), Node (2, Leaf 4, Leaf 11));
> val it = LESS : order
Relational.compare (Node (2, Leaf 5, Leaf 10), Node (2, Leaf 4, Leaf 11));
> val it = GREATER : order

(*) Datatype with a record member.
datatype foo = Foo of {a: int, b: string} | Bar of int;
> datatype foo = Foo of {a:int, b:string} | Bar of int
fun baz (Foo r) = #a r
  | baz (Bar i) = i * 2;
> val baz = fn : foo -> int
fun baz (Foo r) = r.a
  | baz (Bar i) = i * 2;
> val baz = fn : foo -> int
baz (Bar 3);
> val it = 6 : int
baz (Foo {b = "a", a = 4});
> val it = 4 : int

(*) Datatype with spaces in its name.
datatype `foo bar baz` = `Foo Bar` of {a: int, b: string} | Baz of int;
> datatype foo bar baz = Foo Bar of {a:int, b:string} | Baz of int
`Foo Bar` {a = 1, b = "x"};
> val it = Foo Bar {a=1,b="x"} : foo bar baz
`Foo Bar`;
> val it = fn : {a:int, b:string} -> foo bar baz

(*) End datatype.smli
