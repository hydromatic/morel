(*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 *)

(*) Record and tuple are equivalent.
{1 = "a", 2 = true};
> val it = ("a",true) : string * bool
("a", true);
> val it = ("a",true) : string * bool
("a", true) = {1 = "a", 2 = true};
> val it = true : bool
{1 = "a", 2 = true} = ("a", true);
> val it = true : bool
("a", true) = {2 = true, 1 = "a"};
> val it = true : bool
("a", true) = {2 = true, 1 = "b"};
> val it = false : bool
("a", false) = {1 = "a", 2 = true};
> val it = false : bool

(*) Empty record and empty tuple are equivalent, and of type 'unit'.
{};
> val it = () : unit
();
> val it = () : unit
{} = ();
> val it = true : bool
() = {};
> val it = true : bool

(*) Expressions with type annotations
1: int;
> val it = 1 : int
(2, true): int * bool;
> val it = (2,true) : int * bool
[]: int list;
> val it = [] : int list
(1: int) + (2: int);
> val it = 3 : int
1 + (2: int);
> val it = 3 : int
(1: int) + 2;
> val it = 3 : int
String.size "abc": int;
> val it = 3 : int
String.size ("abc": string);
> val it = 3 : int
String.size ("abc": string): int;
> val it = 3 : int

(*) Patterns with type annotations
val x: int = 1;
> val x = 1 : int
val y: bool = true;
> val y = true : bool
val p: int * bool = (1, true);
> val p = (1,true) : int * bool
val empty: int list = [];
> val empty = [] : int list

(*) Function declarations with type annotations
fun f (x: int, y) = x + y;
> val f = fn : int * int -> int
fun f (x, y: int) = x + y;
> val f = fn : int * int -> int
fun f3 (e: {name: string, deptno:int}) = e.deptno;
> val f3 = fn : {deptno:int, name:string} -> int
fun hello (name: string, code: int): string = "hello!";
> val hello = fn : string * int -> string
fun hello2 (name: string) (code : int): string = "hello!";
> val hello2 = fn : string -> int -> string
val hello3: string * int -> string =
  fn (name, code) => "hello!";
> val hello3 = fn : string * int -> string
fun l1 [] = 0 | l1 ((h: string) :: t) = 1 + (l1 t);
> val l1 = fn : string list -> int
fun l2 [] = 0 | l2 (h :: (t: bool list)) = 1 + (l2 t);
> val l2 = fn : bool list -> int
fun countOption (NONE: string option) = 0
  | countOption (SOME x) = 1;
> val countOption = fn : string option -> int
fun countOption0 (NONE) = 0
  | countOption0 (SOME x) = if x = "" then 1 else 2;
> val countOption0 = fn : string option -> int
fun countOption00 (SOME x) = 1
  | countOption00 (NONE: string option) = 0;
> val countOption00 = fn : string option -> int
fun countOption1 (NONE) = 0
  | countOption1 (SOME x) = if x then 1 else 2;
> val countOption1 = fn : bool option -> int
fun countOption2 NONE: int = 0
  | countOption2 (SOME x) = 1;
> val countOption2 = fn : 'a option -> int
fun firstOrSecond (e1 :: e2 :: rest): int = e2
  | firstOrSecond (e1 :: rest) = e1;
> 0.0-0.0 Warning: match nonexhaustive
>   raised at: 0.0-0.0
> val firstOrSecond = fn : int list -> int

(*
sml-nj gives the following error:
stdIn:1.6-2.32 Error: parameter or result constraints of clauses don't agree [tycon mismatch]
  this clause:      'Z option -> string list
  previous clauses:      'Z option -> int list
  in declaration:
    f = (fn NONE => nil: int list
          | SOME x => nil: string list)
*)
fun f NONE:int list = []
  | f (SOME x):string list = [];
> stdIn:11.5-12.32 Error: parameter or result constraints of clauses don't agree [tycon mismatch]
>   raised at: stdIn:11.5-12.32

(*) Function with unit arg
fun one () = 1;
> val one = fn : unit -> int
one ();
> val it = 1 : int
one {};
> val it = 1 : int
let
  fun one () = 1
in
  one ()
end;
> val it = 1 : int

(*) A function with a type that is tricky to unparse correctly:
(*)   'a list -> ('a * 'a list) option
fun g [] = NONE
  | g (h :: t) = SOME (h, t);
> val g = fn : 'a list -> ('a * 'a list) option

(*) Ditto:
(*)   'a list -> ('a * 'a list option) option
fun g [] = NONE
  | g (h :: t) = SOME (h, SOME t);
> val g = fn : 'a list -> ('a * 'a list option) option

(*) Ditto:
(*)   'a list -> ('a option * 'a list option) option
fun g [] = NONE
  | g (h :: t) = SOME (SOME h, SOME t);
> val g = fn : 'a list -> ('a option * 'a list option) option

(*) Pattern-match on record
fun f {a = c, b} = b + c;
> val f = fn : {a:int, b:int} -> int
f {a = 5, b = 6};
> val it = 11 : int

fun f2 {a = 1, b} = b * 2
  | f2 {a, b} = b * 3;
> val f2 = fn : {a:int, b:int} -> int
f2 {a = 1, b = 6};
> val it = 12 : int
f2 {a = 2, b = 6};
> val it = 18 : int

Sys.set ("matchCoverageEnabled", false);
> val it = () : unit
fun f3 {a = 1, b} = b * 2;
> val f3 = fn : {a:int, b:int} -> int
Sys.unset "matchCoverageEnabled";
> val it = () : unit
f3 {a = 1, b = 6};
> val it = 12 : int

(*) The following correctly throws
(*)   unbound variable or constructor: a
(*) Disabled because error stacks made tests brittle.
(*) fun f4 {a = 1, b} = a + b;

(*) Variable with polymorphic type
val x = map;
> val x = fn : ('a -> 'b) -> 'a list -> 'b list
x explode ["ab", "c"];
> val it = [[#"a",#"b"],[#"c"]] : char list list

(*) Has polymorphic type
val rec len = fn x =>
    case x of head :: tail => 1 + (len tail)
            | [] => 0;
> val len = fn : 'a list -> int

len [];
> val it = 0 : int
len [1];
> val it = 1 : int
len [1,2];
> val it = 2 : int

map len (map explode ["ab", "", "cde"]);
> val it = [2,0,3] : int list
map (fn s => len (explode s)) ["ab", "", "cde"];
> val it = [2,0,3] : int list

(*) Type resolution involving record selectors
val emps =
  [{id = 100, name = "Fred", deptno = 10},
   {id = 101, name = "Velma", deptno = 20},
   {id = 102, name = "Shaggy", deptno = 30},
   {id = 103, name = "Scooby", deptno = 30}];
> val emps =
>   [{deptno=10,id=100,name="Fred"},{deptno=20,id=101,name="Velma"},
>    {deptno=30,id=102,name="Shaggy"},{deptno=30,id=103,name="Scooby"}]
>   : {deptno:int, id:int, name:string} list
map #deptno emps;
> val it = [10,20,30,30] : int list
map #deptno (List.filter (fn e => #deptno e > 10) emps);
> val it = [20,30,30] : int list
map #2 [(1,2),(3,1)];
> val it = [2,1] : int list
List.filter #1 [(true,1),(false,2),(true,3)];
> val it = [(true,1),(true,3)] : (bool * int) list
map #2 (List.filter #1 [(true,1),(false,2),(true,3)]);
> val it = [1,3] : int list

(*) Should give
(*)  Error: duplicate variable in pattern(s): e
(*
fun in_ e [] = false
  | in_ e e :: tl = true
  | in_ e hd :: tl = in_ e tl
*)

(*) Should give
(*) Error: operator and operand don't agree [tycon mismatch]
(*)     operator domain: 'Z list list
(*)     operand:         (({id:'X; 'Y} -> 'X) * ([+ ty] * [+ ty] -> [+ ty])) list
(*)     in expression:
(*)       aggregate (((fn <pat> => <exp>),sum) :: nil)
(*
let
  fun foldl f start [] = start
    | foldl f start (hd :: tl) = foldl f (f (start, hd)) tl;
  fun map f [] = []
    | map f (hd :: tl) = (f hd) :: (map f tl);
  fun computeAgg (extractor, folder) list =
      foldl folder (map extractor list);
  fun aggregate aggFns list =
      map (computeAgg list) aggFns;
  fun sum (x, y) = x + y;
in
  aggregate [(#id, sum)] emps
end;
*)

(*) Lambda applied to datatype
fn LESS => ~1
 | EQUAL => 0
 | GREATER => 1;
> val it = fn : order -> int

(*) Lambda with record argument
fn {a, b} => if b then a else a + 1;
> val it = fn : {a:int, b:bool} -> int

(*) Record containing polymorphic functions:
(*)  val it = {a=fn,b=fn}
(*) : {a:'a list -> ('a * 'a list) option, b:'b list -> ('b * 'b list) option}
{a = fn x => case x of [] => NONE | (h :: t) => SOME (h, t),
 b = fn x => case x of [] => NONE | (h :: t) => SOME (h, t)};
> val it = {a=fn,b=fn}
>   : {a:'a list -> ('a * 'a list) option, b:'b list -> ('b * 'b list) option}

(*) Similar, expressed via 'fun'.
(* sml/nj gives:
stdIn:1.2-1.66 Warning: type vars not generalized because of
   value restriction are instantiated to dummy types (X1,X2,...)
val it = {a=1,b=fn} : {a:int, b:?.X1 list -> (?.X1 * ?.X1 list) option}
*)
let
  fun g [] = NONE
    | g (h :: t) = SOME (h, t)
in
  {a=1, b=g}
end;
> val it = {a=1,b=fn} : {a:int, b:'a list -> ('a * 'a list) option}

(*) as above
{a = 1, b = let fun g [] = NONE | g (h :: t) = SOME (h, t) in g end};
> val it = {a=1,b=fn} : {a:int, b:'a list -> ('a * 'a list) option}

(*) List of monotype
[SOME true, NONE];
> val it = [SOME true,NONE] : bool option list
[SOME [1, 2], NONE];
> val it = [SOME [1,2],NONE] : int list option list
[NONE, SOME [{a=1,b=true}], NONE];
> val it = [NONE,SOME [{a=1,b=true}],NONE] : {a:int, b:bool} list option list
from b in [SOME true, NONE];
> val it = [SOME true,NONE] : bool option list

(*) If a function type is spread over several lines, put '->' at the start of
(*) the next line.
val f : ('a -> (int * int) list) -> ('a -> (int * int) list) -> 'a -> (int * int) list = fn a => fn b => fn c => [];
> val f = fn
>   : ('a -> (int * int) list)
>     -> ('b -> (int * int) list) -> 'c -> (int * int) list

(* SML/NJ output for previous is as follows. TODO match SML/NJ type variables.
> val f = fn
>   : ('a -> (int * int) list)
>     -> ('a -> (int * int) list) -> 'a -> (int * int) list
*)

(*) Function with tuple type and lots of type variables returns record type.
(*) Note that after 'z, type variables are 'ba, 'bb, etc.
(*) Also note that 'o' needs to be quoted.
fun r0 (a, b, c, d, e, f, g, h, i, j, k, l, m, n, `o`, p, q, r, s, t, u, v, w, x, y, z, aa, ab, ac) = {a=a,b=b,c=c};
> val r0 = fn
>   :
>     'a * 'b * 'c * 'd * 'e * 'f * 'g * 'h * 'i * 'j * 'k * 'l * 'm * 'n * 'o *
>     'p * 'q * 'r * 's * 't * 'u * 'v * 'w * 'x * 'y * 'z * 'ba * 'bb * 'bc
>     -> {a:'a, b:'b, c:'c}

(*) Highly curried function with lots of type variables returns record type.
fun r0 a b c d e f g h i j k l m n p q r s = {a=a,b=b,c=c};
> val r0 = fn
>   : 'a
>     -> 'b
>        -> 'c
>           -> 'd
>              -> 'e
>                 -> 'f
>                    -> 'g
>                       -> 'h
>                          -> 'i
>                             -> 'j
>                                -> 'k
>                                   -> 'l
>                                      -> 'm
>                                         -> 'n
>                                            -> 'o
>                                               -> 'p
>                                                  -> 'q
>                                                     -> 'r -> {a:'a, b:'b, c:'c}

(*) When printing a type, 'forall' is omitted. Sometimes that eliminates
(*) type variables. The following tests make sure that type variables are
(*) contiguous and numbered left-to-right.
[[], []];
> val it = [[],[]] : 'a list list
let val r = {a=[], b=[]} in r.b end;
> val it = [] : 'a list
fun f (a, b, c) = {x=c, y=a};
> val f = fn : 'a * 'b * 'c -> {x:'c, y:'a}

(*) End type.smli
