(*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 *
 * Pattern matching
 *)

(*) Warning: match nonexhaustive
fun f 1 = 0;
> stdIn:1.5-1.12 Warning: match nonexhaustive
>   raised at: stdIn:1.5-1.12
> val f = fn : int -> int
f 1;
> val it = 0 : int
f 2;
> uncaught exception Bind
>   raised at: stdIn:1.5-1.12

(*) Warning: match nonexhaustive, twice
fun f x =
  let
    fun g 1 = 1
    and h 2 = 2
  in
    (g x) + (h 2)
  end;
> stdIn:3.9-3.16 Warning: match nonexhaustive
>   raised at: stdIn:3.9-3.16
> stdIn:4.9-4.16 Warning: match nonexhaustive
>   raised at: stdIn:4.9-4.16
> val f = fn : int -> int
f 1;
> val it = 3 : int
f 2;
> uncaught exception Bind
>   raised at: stdIn:3.9-3.16

(*) Error: match redundant and nonexhaustive
fun f 1 = 0
  | f 1 = 0;
> stdIn:2.5-2.12 Error: match redundant and nonexhaustive
>   raised at: stdIn:2.5-2.12

(*) OK
fun f 1 = 0
  | f _ = 1;
> val f = fn : int -> int
f 1;
> val it = 0 : int
f 2;
> val it = 1 : int

(*) Error: match redundant
fun f (1, _) = 1
  | f (_, 2) = 2
  | f (1, 2) = 3
  | f (_, _) = 4;
> stdIn:3.5-3.17 Error: match redundant
>   raised at: stdIn:3.5-3.17

(*) The Ackermann-PÃ©ter function
(*) See "Recursion Equations as a Programming Language", D A Turner 1982
fun ack 0 n = n + 1
  | ack m 0 = ack (m - 1) 1
  | ack m n = ack (m - 1) (ack m (n - 1));
> val ack = fn : int -> int -> int
ack 0 0;
> val it = 1 : int
ack 0 1;
> val it = 2 : int
ack 1 0;
> val it = 2 : int
ack 1 2;
> val it = 4 : int
ack 2 3;
> val it = 9 : int
ack 3 3;
> val it = 61 : int

(* Various types, exhaustive & non-exhaustive ------------------ *)
(*) From https://smlhelp.github.io/book/docs/start/syntax/

(*) unit, exhaustive
(fn () => ());
> val it = fn : unit -> unit

(*) bool, non-exhaustive
(fn true => 1);
> stdIn:1.2-1.14 Warning: match nonexhaustive
>   raised at: stdIn:1.2-1.14
> val it = fn : bool -> int

(*) bool, exhaustive
(fn true  => 1
  | false => 0);
> val it = fn : bool -> int

(*) order, non-exhaustive
(fn LESS => ~1);
> stdIn:1.2-1.15 Warning: match nonexhaustive
>   raised at: stdIn:1.2-1.15
> val it = fn : order -> int

(*) order, non-exhaustive
(fn LESS  => ~1
  | EQUAL => 0);
> stdIn:1.2-2.15 Warning: match nonexhaustive
>   raised at: stdIn:1.2-2.15
> val it = fn : order -> int

(*) order, exhaustive
(fn LESS    => ~1
  | EQUAL   => 0
  | GREATER => 1);
> val it = fn : order -> int

(*) int, non-exhaustive
(fn 0 => true);
> stdIn:1.2-1.14 Warning: match nonexhaustive
>   raised at: stdIn:1.2-1.14
> val it = fn : int -> bool

(*) order, exhaustive
(fn 0 => true
  | _ => false);
> val it = fn : int -> bool

(*) int list, non-exhaustive
(fn x::_ => x + 1);
> stdIn:1.2-1.18 Warning: match nonexhaustive
>   raised at: stdIn:1.2-1.18
> val it = fn : int list -> int

(*) int list, exhaustive
(fn [] => 0
  | x::_ => x + 1);
> val it = fn : int list -> int

(*) int * bool, non-exhaustive
(fn (0,b) => true andalso b);
> stdIn:1.2-1.28 Warning: match nonexhaustive
>   raised at: stdIn:1.2-1.28
> val it = fn : int * bool -> bool

(*) int * bool, exhaustive
(fn (0,b) => true andalso b
  | (n,_) => false);
> val it = fn : int * bool -> bool

(* Exhaustive function of option list  ------------------------- *)
(*) Non-exhaustive function
fun f [(SOME i)] = i
  | f [] = 0;
> 0.0-0.0 Warning: match nonexhaustive
>   raised at: 0.0-0.0
> val f = fn : int option list -> int

(*) Add NONE, still non-exhaustive
fun f [(SOME i)] = i
  | f [NONE] = ~1
  | f [] = 0;
> 0.0-0.0 Warning: match nonexhaustive
>   raised at: 0.0-0.0
> val f = fn : int option list -> int

(*) Allow list longer than 1, still non-exhaustive
fun f [(SOME i)] = i
  | f [] = 0
  | f (one :: two :: rest) = ~2;
> 0.0-0.0 Warning: match nonexhaustive
>   raised at: 0.0-0.0
> val f = fn : int option list -> int

(*) Exhaustive
fun f [(SOME i)] = i
  | f [NONE] = ~1
  | f [] = 0
  | f (one :: two :: rest) = ~2;
> val f = fn : int option list -> int

(*) End match.smli
